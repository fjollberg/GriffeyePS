#Require -Version 7.3

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', '',
    Justification='Vics is not really a plural',
    Scope='Function',
    Target='*Vics')]
param()

<#
  .Synopsis
  Get a NCMEC report Id as found in the specified XML file.

  .Description
  The XML file will be parsed as NCMEC report metadata if the content
  mathes. Otherwise an attempt to find an Id as generated by an export
  from Hubstream is attempted.

  .Parameter Path
  The path to the XML file to parse the Id from.

  .Outputs
  The NCMEC report Id a String of format "NCMEC #123" if an Id is found.
#>
function Get-NCMECID {
    [CmdletBinding()]
    param (
        [parameter(Mandatory, ValueFromPipeline)]
        [ValidateScript({
            if (Test-Path -Type Leaf $_) {
                return $true
            }
            throw ("Path '{0}' is not a valid file." -f $_)
        })]
        [String]$Path
    )
    process {
        $NCMECXml = [xml](Get-Content $Path)

        switch ($NCMECXml) {
            {$NCMECXml.report -and (($NCMECXml.report).xmlns -eq 'http://report.cybertip.org/leaws/icac')} {
                # NCMEC
                "NCMEC #{0}" -f $NCMECXml.report.reportId
                break
            }
            {$NCMECXml.report -and (($NCMECXml.report).ns0 -eq 'http://report.cybertip.org/leaws/icac')} {
                # Some NCMEC-like tool with different name-space declaration.
                "NCMEC #{0}" -f $NCMECXml.report.reportId
                break
            }
            {$NCMECXml.IMPORT?.CRIMEREPORT} {
                # Hubstream
                $NCMECXml.IMPORT.CRIMEREPORT.Name
                break
            }
            default {
                throw ("Unable to parse metadata in '{0}'." -f $Path)
            }
        }
    }
}


<#
  .Synopsis
  Generate a VICS Json file for NCMEC report in given path.

  .Description
  Will generate a VICS Json file with randomized name in the specified path
  and return the System.IO.FileInfo object describing the file.

  .Parameter Path
  The path to the root of a folder tree, in which the VICS JSON file
  will be written. Will be the base container of the VICS report. A root folder
  may contain multiple NCMEC reports which will be included in the same
  CaseNumber. The NCMEC report ids will be used as SourceID for the media files.

  .Parameter CaseNumber
  Use given string as CaseNumber in the VICS output.

  .Parameter IncludeSupplement
  Include additional files found in folders 'supplement' or 'supplemental' in
  VICS report.

  .Outputs
  A System.IO.FileInfo object describing the generated file.
#>
function ConvertTo-Vics {
    [CmdletBinding()]
    param (
        [parameter(Mandatory, ValueFromPipeline)]
        [ValidateScript({
            if (Test-Path -Type Container $_) {
                return $true
            }
            throw ("Path '{0}' is not a valid folder." -f $_)
        })]
        [String]$Path,

        [parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [String]$CaseNumber,

        [switch]$IncludeSupplement
    )
    process {
        $TempFile = "{0}.json" -f [IO.Path]::GetFileNameWithoutExtension(([IO.Path]::GetRandomFileName()))
        $OutFile = New-Item -Type File (Join-Path $Path $TempFile) -ErrorAction Stop
        Find-NCMECFolder $Path | Get-VicsJson -Root $Path -CaseNumber $CaseNumber -IncludeSupplement:$IncludeSupplement | Out-File -Force $OutFile
        $OutFile
    }
}



<#
  .Synopsis
  Generate VICS Json for a folder containing NCMEC reports.

  .Description
  Will generate VICS Json metadata for contents in the specified root
  folder.

  A root folder may contain multiple NCMEC reports which can be included in
  the same VICS report using the pipeline. The NCMEC report id will be used
  as SourceId in the VICS output.

  .Parameter Root
  The path to the root of the structure, from which relative paths to media
  will be calculated.

  .Parameter Path
  The path to a media folder within the root structure. May be a stream of
  paths on the pipeline to be included in the same report. The NCMEC report
  ids will be used for SourceId in the VICS output.

  .Parameter CaseNumber
  Use given string as CaseNumber in the VICS output.

  .Parameter IncludeSupplement
  Include additional files found in folders 'supplement' or 'supplemental' in
  JSON output.
#>
function Get-VicsJson {
    [CmdletBinding()]
    param (
        [parameter(Mandatory, ValueFromPipeline)]
        [ValidateScript({
            if (Test-Path -Type Container $_) {
                return $true
            }
            throw ("Path '{0}' is not a valid folder." -f $_)
        })]
        [String]$Path,

        [parameter(Mandatory)]
        [ValidateScript({
            if (Test-Path -Type Container $_) {
                return $true
            }
            throw ("Path to root folder '{0}' is not a valid folder." -f $_)
        })]
        [String]$Root,

        [parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [String]$CaseNumber,

        [switch]$IncludeSupplement
    )
    begin {
        $VicsData = [ordered]@{
            '@odata.context' = 'http://github.com/VICSDATAMODEL/ProjectVic/DataModels/2.0.xml/UNKNOWN/$metadata#Cases'
            value = ,[ordered]@{
                CaseID = (New-Guid).Guid
                CaseNumber = $CaseNumber
                Media = New-Object -TypeName Collections.ArrayList
            }
        }
        [long]$Count = 0
        $RootDir = Get-Item $Root
    }
    process {
        $MediaDirectory = Get-ChildItem $Path -Filter 'media' | Select-Object -First 1
        if (-not $MediaDirectory) {
            throw ("No Media directory found in '{0}'" -f $Path)
        }

        $NCMECXmlFile = Get-ChildItem $MediaDirectory.Parent -Filter '*.xml' | Select-Object -First 1
        if (-not $NCMECXmlFile) {
            throw ("No NCMEC XML file found in '{0}'" -f $Path)
        }

        $NCMECId = Get-NCMECID $NCMECXmlFile

        $MediaFiles = [System.Collections.ArrayList]::new()
        $MediaFiles += Get-ChildItem $MediaDirectory -Recurse -File

        if ($IncludeSupplement) {
            # Also add files found in folders supplement or supplemental.
            Get-ChildItem $Path -Filter 'supplement??' | Foreach-Object {
                if ($_ -and ((Get-ChildItem $_ | Measure-Object).Count -ne 0)) {
                    $MediaFiles += Get-ChildItem $_ -Recurse -File
                }
            }
        }

        $MediaFiles | Foreach-Object {
            $MediaFile = $_

            $Media = [ordered]@{
                MediaID = $Count
                MD5 = (Get-FileHash -Algorithm MD5 $MediaFile).Hash
                SHA1 = (Get-FileHash -Algorithm SHA1 $MediaFile).Hash
                RelativeFilePath = $MediaFile.FullName.Remove(0, $RootDir.FullName.Length+1)
                MediaSize = $MediaFile.Length
                MediaFiles = , @{
                    MD5 = (Get-FileHash -Algorithm MD5 $MediaFile).Hash
                    FileName = $MediaFile.Name
                    FilePath = Join-Path $MediaDirectory.Name $Mediafile.Name
                    SourceID = $NCMECId
                }
            }

            $VicsData.value[0].Media += $Media
            $Count++
        }
    }
    end {
        $VicsData.value[0].TotalMediaFiles = $Count
        $VicsData | ConvertTo-JSON -Depth 10
    }
}


<#
  .Synopsis
  Retrieve NCMEC report folders found in given path.

  .Description
  Will traverse given path in order to find what is believed to be NCMEC report folders
  and return the DirectoryInfo item for them. Will recursively search the path for structures
  containing a folder named 'Media' with an XML file alongside expected to contain
  NCMEC meta data.

  .Parameter Path
  Path to look for NCMEC reports in.

  .Outputs
  A stream of DirectoryInfo items for folders matching NCMEC reports.
#>
function Find-NCMECFolder {
    [CmdletBinding()]
    param (
        [parameter(Mandatory, ValueFromPipeline)]
        [ValidateScript({
            if (Test-Path -Type Container $_) {
                return $true
            }
            throw ("Path '{0}' is not a valid folder." -f $_)
        })]
        [String]$Path
    )
    process {
        Get-ChildItem -Recurse $Path -Filter 'Media' | Foreach-Object {
            if (Get-ChildItem $_.Parent -Filter '*.xml' | Select-Object -First 1) {
                $_.Parent
            }
        }
    }
}


Export-ModuleMember -Function Get-VicsJson
Export-ModuleMember -Function ConvertTo-Vics
Export-ModuleMember -Function Find-NCMECFolder
Export-ModuleMember -Function Get-NCMECID
